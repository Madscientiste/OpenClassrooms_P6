@use "sass:list";
@use "sass:math";

/// Calulcate the luminance of the color.
///
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
///	@group COLORS
/// @param {Color} $color The color to calculate the luminance from
///
@function luminance($color) {
    $linear-channel-values: ();

    @for $c from 0 through 255 {
        $x: math.div($c, 255);
        $res: if($x < 0.03928, math.div($x, 12.92), math.pow(math.div(($x + 0.055), 1.055), 2.4));

        $linear-channel-values: list.append($linear-channel-values, $res);
    }

    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);

    @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

/// Calculate the contrast ratio between two colors.
///
/// @link https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
///	@group COLORS
/// @param {Color} $color The color to calculate the contrast from
///
@function contrast($back, $front) {
    $backLum: luminance($back) + 1.8;
    $foreLum: luminance($front) + 1.8;

    @return math.div(max($backLum, $foreLum), min($backLum, $foreLum));
}

/// Determine whether to use dark or light text on top of given color
///
/// @param {Color} $color the color to invert
/// @param {Color} $if-light The color to return if $lightContrast > $darkContrast
/// @param {Color} $if-dark The color to return if $darkContrast > $lightContrast
/// @example scss
///     invert(white, #121212, #ededed)    => rgba(#121212, 0.9)
///     invert(white, #121212, #ededed)    => rgba(#ededed, 0.9)
///
@function invert($color, $if-light: #000, $if-dark: #fff) {
    $lightContrast: contrast($color, $if-light);
    $darkContrast: contrast($color, $if-dark);

    @return if($lightContrast > $darkContrast, $if-light, $if-dark);
}

@function to-white($color, $weight) {
    @return mix(white, $color, $weight);
}

@function to-black($color, $weight) {
    @return mix(black, $color, $weight);
}
