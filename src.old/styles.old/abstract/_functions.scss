@use "sass:math";
@use "sass:map";
@use "sass:color";

@function clr_luminance($color) {
	@if type-of($color) != "color" {
		@return 0.55;
	}
	$color-rgb: (
		"red": red($color),
		"green": green($color),
		"blue": blue($color),
	);
	@each $name, $value in $color-rgb {
		$adjusted: 0;
		$value: math.div($value, 255);

		@if $value < 0.03928 {
			$value: math.div($value, 12.92);
		} @else {
			$value: math.div(($value + 0.055), 1.055);
			$value: powerNumber($value, 2);
		}
		$color-rgb: map-merge(
			$color-rgb,
			(
				$name: $value,
			)
		);
	}
	@return (map.get($color-rgb, "red") * 0.2126) + (map.get($color-rgb, "green") * 0.7152) +
		(map.get($color-rgb, "blue") * 0.0722);
}

@function get_invert_clr($color) {
	@if (clr_luminance($color) > 0.25) {
		@return rgba(#000, 0.9);
	} @else {
		@return rgba(#fff, 0.9);
	}
}

@function get_light_clr($color) {
	@if type-of($color) == "color" {
		$l: 96%;
		@if lightness($color) > 96% {
			$l: lightness($color);
		}
		@return color.change($color, $lightness: $l);
	}
	@return $background;
}

@function get_dark_clr($color) {
	@if type-of($color) == "color" {
		$base-l: 29%;
		$luminance: clr_luminance($color);
		$luminance-delta: (0.53 - $luminance);
		$target-l: round($base-l + ($luminance-delta * 53));

		@return color.change($color, $lightness: max($base-l, $target-l));
	}

	@return $text-strong;
}

@function powerNumber($number, $exp) {
	$value: 1;

	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	} @else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: $value / $number;
		}
	}

	@return $value;
}
